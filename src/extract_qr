#!/usr/bin/env python
from __future__ import print_function

import roslib
# roslib.load_manifest('exercise4')
import sys
import rospy
import cv2
import numpy as np
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from std_msgs.msg import ColorRGBA
from task2.srv import qr, qrResponse

import pyzbar.pyzbar as pyzbar

dictm = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_6X6_250)

# The object that we will pass to the markerDetect function
params =  cv2.aruco.DetectorParameters_create()

# To see description of the parameters
# https://docs.opencv.org/3.3.1/d1/dcd/structcv_1_1aruco_1_1DetectorParameters.html

# You can set these parameters to get better marker detections
params.adaptiveThreshConstant = 25
adaptiveThreshWinSizeStep = 2

returnLink = ""
bridge = CvBridge()

def image_callback(data):
    #print('Iam here!')
    global bridge
    try:
        cv_image = bridge.imgmsg_to_cv2(data, "bgr8")
    except CvBridgeError as e:
        print(e)

    # Set the dimensions of the image
    dims = cv_image.shape

    # Tranform image to gayscale
    gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)


    # Option 1 - use adaptive thresholding
    img_out = cv2.adaptiveThreshold(gray,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,11,5)

    # Extract contours
    _, contours, hierarchy = cv2.findContours(img_out, 2, 2)


        # Find a QR code in the image
    decodedObjects = pyzbar.decode(cv_image)

    #print(decodedObjects)

    if len(decodedObjects) == 1:
        dObject = decodedObjects[0]
        print("Found 1 QR code in the image!")
        print("Data: ", dObject.data)

        global returnLink
        returnLink = str(dObject.data)


def handle_req(req):

    image_sub = rospy.Subscriber("/camera/rgb/image_raw", Image, image_callback)

    global returnLink
    print("waiting for qr decoding")
    while returnLink == "":
        pass
        #print("waiting for qr decoding")
    print("Sending service message:", returnLink, "\n")
    returnLink2 = returnLink
    image_sub.unregister()
    returnLink = ""
    return qrResponse(returnLink2)


def main():
    rospy.init_node('image_converter', anonymous=True)
    service = rospy.Service('qr_service_py', qr, handle_req)

    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")

    cv2.destroyAllWindows()


if __name__ == '__main__':
    main()
